AWSTemplateFormatVersion: 2010-09-09
Description: Creates an S3 bucket for hosting a Static HTML/CSS website
Parameters:
  # The bucket name must be the same as the CNAME
  BucketName:
    Type: String
    Default: tbqa
  CertificateACM:
    Type: String
    Default: arn:aws:acm:us-east-1:1234567890:certificate/7ea2f12f-76c9-4190-92ee-f61a69894c1a
  CustomDomain:
    Type: String
    Default: tbqa.takafulbazaar.com.pk
    Description: The custom domain name to be used as a CNAME for the CloudFront distribution
  Hostedzone:
    Type: String
    Default: ZXCVBHYT00539813
    Description: The Hosted zone ID in which CNAME will be created
  
Resources:
  BucketnameSSMParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: /tbenv/frontendbucketname              # Specify the parameter name
      Description: My parameter value   # Optional: Add a description
      Type: String                      # Specify the parameter type (String, SecureString, or StringList)
      Value: !Ref BucketName           # Specify the parameter value
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Bucket names must be globally unique
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    # don't delete bucket when deleting the stack
    #DeletionPolicy: Retain
    #UpdateReplacePolicy: Retain
  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt AWSLambdaFunctionbackends3cdn.Arn
      bucket_name: !Ref S3Bucket    ## Additional parameter here

  AWSLambdaFunctionbackends3cdn:
     Type: AWS::Lambda::Function
     Properties:
       Description: "Empty an S3 bucket!"
       FunctionName: !Sub 'BackendPipelineDeleteS3cdn-${AWS::Region}-lambda'
       Handler: index.handler
       Role: !GetAtt AWSLambdaExecutionRolebackends3cloudfront.Arn
       Timeout: 360
       Runtime: python3.8
       Code:
         ZipFile: |
          import boto3
          import cfnresponse
          ### cfnresponse module help in sending responses to CloudFormation
          ### instead of writing your own code

          def handler(event, context):
              # Get request type
              the_event = event['RequestType']        
              print("The event is: ", str(the_event))

              response_data = {}
              s3 = boto3.client('s3')

              # Retrieve parameters (bucket name)
              bucket_name = event['ResourceProperties']['bucket_name']
              
              try:
                  if the_event == 'Delete':
                      print("Deleting S3 content...")
                      b_operator = boto3.resource('s3')
                      b_operator.Bucket(str(bucket_name)).objects.all().delete()

                  # Everything OK... send the signal back
                  print("Execution succesfull!")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print("Execution failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

  AWSLambdaExecutionRolebackends3cloudfront:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: !Sub BackendPipelineDeleteS3cdn-${AWS::Region}-AWSLambda-CW
       - PolicyDocument:
           Statement:
           - Action:
             - s3:PutObject
             - s3:DeleteObject
             - s3:List*
             Effect: Allow
             Resource:
             - !Sub arn:aws:s3:::${S3Bucket}
             - !Sub arn:aws:s3:::${S3Bucket}/*
           Version: '2012-10-17'
         PolicyName: !Sub BackendPipelineDeleteS3cdn-${AWS::Region}-AWSLambda-S3
       RoleName: !Sub BackendPipelineDeleteS3cdn-${AWS::Region}-AWSLambdaExecutionRole  
 
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
            - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
            Principal: '*'
          
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
          - DomainName: !ImportValue ALBName
            Id: ALBOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Aliases:
          - !Ref CustomDomain
        DefaultRootObject: index.html
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateACM
          SslSupportMethod: sni-only
        PriceClass: PriceClass_100
        CacheBehaviors:
          - TargetOriginId: ALBOrigin
            PathPattern: /api/*
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: true
            MinTTL: 0
            MaxTTL: 0
            DefaultTTL: 0
        
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
  
  ####################################
  DnsRecordForCNAME:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Hostedzone
      Name: !Ref CustomDomain
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !GetAtt CloudFrontDistribution.DomainName
Outputs:
  ExportedBucketName:
    Description: The name of the S3 bucket
    Value: !Ref S3Bucket
    Export:
      Name: s3-frontend-bucket
  StaticSiteURL:
    Description: URL of the static website hosted in S3
    Value: !GetAtt S3Bucket.WebsiteURL
    Export:
      Name: s3-url
  CloudFrontDistributionDomainName:
    Description: The domain name of the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: cloudfront-domain
  CustomDomainName:
    Description: The custom domain name mapped to the CloudFront distribution
    Value: !Ref CustomDomain
    Export:
      Name: custom-domain
  
